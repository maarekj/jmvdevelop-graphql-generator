Generated/Custom/Scalar/AbstractDateTimeTzType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Scalar;

    use DateTimeImmutable;
    use GraphQL\Language\AST\Node;

    abstract class AbstractDateTimeTzType
    {
    	abstract public function serialize(DateTimeImmutable $value): string|int|float|bool|null;


    	abstract public function parseValue(string|int|float|bool|null $value): DateTimeImmutable;


    	abstract public function parseLiteral(Node $valueNode, ?array $variables): DateTimeImmutable;
    }
Custom/Scalar/DateTimeTzType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Scalar;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Scalar\AbstractDateTimeTzType;

    final class DateTimeTzType extends AbstractDateTimeTzType
    {
    }
Generated/ScalarType/AbstractCompanyIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ScalarType;

    use GraphQL\Language\AST\Node;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Company;

    abstract class AbstractCompanyIdType
    {
    	abstract public function serialize(Company $value): string|int|float|bool|null;


    	abstract public function parseValue(string|int|float|bool|null $value): Company;


    	abstract public function parseLiteral(Node $valueNode, ?array $variables): Company;
    }
ScalarType/CompanyIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ScalarType\AbstractCompanyIdType;

    final class CompanyIdType extends AbstractCompanyIdType
    {
    }
Generated/ScalarType/AbstractUserIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ScalarType;

    use GraphQL\Language\AST\Node;
    use JmvDevelop\GraphqlGenerator\Example\Entity\User;

    abstract class AbstractUserIdType
    {
    	abstract public function serialize(User $value): string|int|float|bool|null;


    	abstract public function parseValue(string|int|float|bool|null $value): User;


    	abstract public function parseLiteral(Node $valueNode, ?array $variables): User;
    }
ScalarType/UserIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ScalarType\AbstractUserIdType;

    final class UserIdType extends AbstractUserIdType
    {
    }
Generated/ScalarType/AbstractCategoryIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ScalarType;

    use GraphQL\Language\AST\Node;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Category;

    abstract class AbstractCategoryIdType
    {
    	abstract public function serialize(Category $value): string|int|float|bool|null;


    	abstract public function parseValue(string|int|float|bool|null $value): Category;


    	abstract public function parseLiteral(Node $valueNode, ?array $variables): Category;
    }
ScalarType/CategoryIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ScalarType\AbstractCategoryIdType;

    final class CategoryIdType extends AbstractCategoryIdType
    {
    }
Generated/Custom/Interface/AbstractWithIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Interface;

    use GraphQL\Type\Definition\Type;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Category;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Company;
    use JmvDevelop\GraphqlGenerator\Example\Entity\User;

    abstract class AbstractWithIdType
    {
    	/**
    	 * Object with id
    	 */
    	abstract public function resolveType(User|Category|Company $value): Type;
    }
Custom/Interface/WithIdType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Interface;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Interface\AbstractWithIdType;

    final class WithIdType extends AbstractWithIdType
    {
    }
Generated/InterfaceType/AbstractWithNameType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InterfaceType;

    use GraphQL\Type\Definition\Type;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Category;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Company;

    abstract class AbstractWithNameType
    {
    	/**
    	 * Object with string name
    	 */
    	abstract public function resolveType(Category|Company $value): Type;
    }
InterfaceType/WithNameType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\InterfaceType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InterfaceType\AbstractWithNameType;

    final class WithNameType extends AbstractWithNameType
    {
    }
Generated/ObjectType/AbstractPagerCompanyType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ObjectType;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Pager;

    abstract class AbstractPagerCompanyType
    {
    	/**
    	 * @psalm-param \JmvDevelop\GraphqlGenerator\Example\Entity\Pager<\JmvDevelop\GraphqlGenerator\Example\Entity\Company> $root
    	 */
    	public function resolveCurrentPage(Pager $root): int
    	{
    		return $root->getCurrentPage();
    	}


    	/**
    	 * @psalm-param \JmvDevelop\GraphqlGenerator\Example\Entity\Pager<\JmvDevelop\GraphqlGenerator\Example\Entity\Company> $root
    	 */
    	public function resolveMaxPerPage(Pager $root): int
    	{
    		return $root->getMaxPerPage();
    	}


    	/**
    	 * @psalm-param \JmvDevelop\GraphqlGenerator\Example\Entity\Pager<\JmvDevelop\GraphqlGenerator\Example\Entity\Company> $root
    	 */
    	public function resolveNbPages(Pager $root): int
    	{
    		return $root->getNbPages();
    	}


    	/**
    	 * @psalm-param \JmvDevelop\GraphqlGenerator\Example\Entity\Pager<\JmvDevelop\GraphqlGenerator\Example\Entity\Company> $root
    	 */
    	public function resolveCount(Pager $root): int
    	{
    		return $root->getCount();
    	}


    	/**
    	 * @return list<\JmvDevelop\GraphqlGenerator\Example\Entity\Company>
    	 * @psalm-param \JmvDevelop\GraphqlGenerator\Example\Entity\Pager<\JmvDevelop\GraphqlGenerator\Example\Entity\Company> $root
    	 */
    	public function resolveResults(Pager $root): array
    	{
    		return $root->getResults();
    	}
    }
ObjectType/PagerCompanyType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ObjectType\AbstractPagerCompanyType;

    final class PagerCompanyType extends AbstractPagerCompanyType
    {
    }
Generated/ObjectType/AbstractUserType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ObjectType;

    use JmvDevelop\GraphqlGenerator\Example\Entity\User;

    abstract class AbstractUserType
    {
    	public function resolveId(User $root): string|int
    	{
    		return $root->getId();
    	}


    	public function resolveEmail(User $root): string
    	{
    		return $root->getEmail();
    	}


    	public function resolveLastname(User $root): string
    	{
    		return $root->getLastname();
    	}


    	public function resolveFirstname(User $root): string
    	{
    		return $root->getFirstname();
    	}
    }
ObjectType/UserType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ObjectType\AbstractUserType;

    final class UserType extends AbstractUserType
    {
    }
Generated/ObjectType/AbstractCategoryType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ObjectType;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Category;

    abstract class AbstractCategoryType
    {
    	public function resolveId(Category $root): string|int
    	{
    		return $root->getId();
    	}


    	public function resolveName(Category $root): string
    	{
    		return $root->getName();
    	}
    }
ObjectType/CategoryType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\ObjectType\AbstractCategoryType;

    final class CategoryType extends AbstractCategoryType
    {
    }
Generated/Custom/Object/AbstractCompanyType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Object;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Company;
    use JmvDevelop\GraphqlGenerator\Example\Entity\User;

    abstract class AbstractCompanyType
    {
    	public function resolveId(Company $root): string|int
    	{
    		return $root->getId();
    	}


    	public function resolveName(Company $root): string
    	{
    		return $root->getName();
    	}


    	/**
    	 * The manager of company
    	 */
    	abstract public function resolveUser(Company $root): User|null;


    	/**
    	 * All categories of company
    	 *
    	 * @return list<\JmvDevelop\GraphqlGenerator\Example\Entity\Category>
    	 */
    	abstract public function resolveCategories(Company $root): array;


    	/**
    	 * Search categories of company
    	 *
    	 * @return list<\JmvDevelop\GraphqlGenerator\Example\Entity\Category|null>|null
    	 * @psalm-param list<string|null>|null $keywords
    	 */
    	abstract public function resolveSearchCategories(
    		Company $root,
    		string|null $name,
    		array|null $keywords,
    		string $orderBy
    	): array|null;
    }
Custom/Object/CompanyType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Object\AbstractCompanyType;

    final class CompanyType extends AbstractCompanyType
    {
    }
Generated/UnionType/AbstractCompanyOrCategoryType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\UnionType;

    use GraphQL\Type\Definition\Type;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Category;
    use JmvDevelop\GraphqlGenerator\Example\Entity\Company;

    abstract class AbstractCompanyOrCategoryType
    {
    	abstract public function resolveType(Company|Category $value): Type;
    }
UnionType/CompanyOrCategoryType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\UnionType;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\UnionType\AbstractCompanyOrCategoryType;

    final class CompanyOrCategoryType extends AbstractCompanyOrCategoryType
    {
    }
Generated/InputObjectType/StringExprInputType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType;

    final class StringExprInputType
    {
    	public function __construct(
    		public string|null $eq = null,
    		public string|null $neq = null,
    		public string|null $like = null,
    	) {
    	}


    	public function _withEq($eq): StringExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\StringExprInputType(eq: $eq, neq: $this->neq, like: $this->like);
    	}


    	public function _withNeq($neq): StringExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\StringExprInputType(eq: $this->eq, neq: $neq, like: $this->like);
    	}


    	public function _withLike($like): StringExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\StringExprInputType(eq: $this->eq, neq: $this->neq, like: $like);
    	}
    }
Generated/InputObjectType/IntExprInputType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType;

    final class IntExprInputType
    {
    	public function __construct(
    		public int|null $eq = null,
    		public int|null $neq = null,
    		public int|null $gt = null,
    		public int|null $gte = null,
    		public int|null $lt = null,
    		public int|null $lte = null,
    	) {
    	}


    	public function _withEq($eq): IntExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\IntExprInputType(eq: $eq, neq: $this->neq, gt: $this->gt, gte: $this->gte, lt: $this->lt, lte: $this->lte);
    	}


    	public function _withNeq($neq): IntExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\IntExprInputType(eq: $this->eq, neq: $neq, gt: $this->gt, gte: $this->gte, lt: $this->lt, lte: $this->lte);
    	}


    	public function _withGt($gt): IntExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\IntExprInputType(eq: $this->eq, neq: $this->neq, gt: $gt, gte: $this->gte, lt: $this->lt, lte: $this->lte);
    	}


    	public function _withGte($gte): IntExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\IntExprInputType(eq: $this->eq, neq: $this->neq, gt: $this->gt, gte: $gte, lt: $this->lt, lte: $this->lte);
    	}


    	public function _withLt($lt): IntExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\IntExprInputType(eq: $this->eq, neq: $this->neq, gt: $this->gt, gte: $this->gte, lt: $lt, lte: $this->lte);
    	}


    	public function _withLte($lte): IntExprInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\IntExprInputType(eq: $this->eq, neq: $this->neq, gt: $this->gt, gte: $this->gte, lt: $this->lt, lte: $lte);
    	}
    }
Generated/InputObjectType/SearchCompanyWhereInputType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType;

    final class SearchCompanyWhereInputType
    {
    	/**
    	 * @psalm-param list<\JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType|null>|null $_and
    	 * @psalm-param list<\JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType|null>|null $_or
    	 * @psalm-param 'YES'|'NO'|'DEFAULT'|null $withCategory
    	 */
    	public function __construct(
    		public array|null $_and = null,
    		public array|null $_or = null,
    		public StringExprInputType|null $name = null,
    		public IntExprInputType|null $id = null,
    		public string|null $withCategory = null,
    	) {
    	}


    	public function _with_and($_and): SearchCompanyWhereInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType(_and: $_and, _or: $this->_or, name: $this->name, id: $this->id, withCategory: $this->withCategory);
    	}


    	public function _with_or($_or): SearchCompanyWhereInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType(_and: $this->_and, _or: $_or, name: $this->name, id: $this->id, withCategory: $this->withCategory);
    	}


    	public function _withName($name): SearchCompanyWhereInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType(_and: $this->_and, _or: $this->_or, name: $name, id: $this->id, withCategory: $this->withCategory);
    	}


    	public function _withId($id): SearchCompanyWhereInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType(_and: $this->_and, _or: $this->_or, name: $this->name, id: $id, withCategory: $this->withCategory);
    	}


    	public function _withWithCategory($withCategory): SearchCompanyWhereInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType(_and: $this->_and, _or: $this->_or, name: $this->name, id: $this->id, withCategory: $withCategory);
    	}
    }
Generated/Custom/InputObject/CreateUserInputType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\InputObject;

    final class CreateUserInputType
    {
    	public function __construct(
    		public string $email,
    		public string|null $lastname = null,
    		public string|null $firstname = null,
    	) {
    	}


    	public function _withEmail($email): CreateUserInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\InputObject\CreateUserInputType(email: $email, lastname: $this->lastname, firstname: $this->firstname);
    	}


    	public function _withLastname($lastname): CreateUserInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\InputObject\CreateUserInputType(email: $this->email, lastname: $lastname, firstname: $this->firstname);
    	}


    	public function _withFirstname($firstname): CreateUserInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\InputObject\CreateUserInputType(email: $this->email, lastname: $this->lastname, firstname: $firstname);
    	}
    }
Generated/InputObjectType/EditUserInputType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType;

    use JmvDevelop\GraphqlGenerator\Example\Entity\User;

    final class EditUserInputType
    {
    	public function __construct(
    		public User $id,
    		public string $email,
    		public string|null $lastname = null,
    		public string|null $firstname = null,
    	) {
    	}


    	public function _withId($id): EditUserInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\EditUserInputType(id: $id, email: $this->email, lastname: $this->lastname, firstname: $this->firstname);
    	}


    	public function _withEmail($email): EditUserInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\EditUserInputType(id: $this->id, email: $email, lastname: $this->lastname, firstname: $this->firstname);
    	}


    	public function _withLastname($lastname): EditUserInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\EditUserInputType(id: $this->id, email: $this->email, lastname: $lastname, firstname: $this->firstname);
    	}


    	public function _withFirstname($firstname): EditUserInputType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\EditUserInputType(id: $this->id, email: $this->email, lastname: $this->lastname, firstname: $firstname);
    	}
    }
Generated/Test/TestInputWithStringFieldType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test;

    final class TestInputWithStringFieldType
    {
    	public function __construct(public string $name)
    	{
    	}


    	public function _withName($name): TestInputWithStringFieldType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test\TestInputWithStringFieldType(name: $name);
    	}
    }
Generated/Test/TestWithNullableInputFieldType.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test;

    final class TestWithNullableInputFieldType
    {
    	public function __construct(
    		public TestInputWithStringFieldType|null $nullableField = null,
    		public TestInputWithStringFieldType $field,
    	) {
    	}


    	public function _withNullableField($nullableField): TestWithNullableInputFieldType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test\TestWithNullableInputFieldType(nullableField: $nullableField, field: $this->field);
    	}


    	public function _withField($field): TestWithNullableInputFieldType
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test\TestWithNullableInputFieldType(nullableField: $this->nullableField, field: $field);
    	}
    }
Generated/Custom/QueryField/AbstractSearchByNameField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\QueryField;

    abstract class AbstractSearchByNameField
    {
    	/**
    	 * Search all entities with name
    	 *
    	 * @return list<\JmvDevelop\GraphqlGenerator\Example\Entity\Category|\JmvDevelop\GraphqlGenerator\Example\Entity\Company>
    	 * @psalm-param 'ASC'|'DESC'|'DEFAULT'|null $orderByName
    	 */
    	abstract public function resolve(string|null $name, string|null $orderByName): array;
    }
Custom/QueryField/SearchByNameField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\QueryField\AbstractSearchByNameField;

    final class SearchByNameField extends AbstractSearchByNameField
    {
    }
Generated/QueryField/AbstractSearchCompaniesField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Pager;
    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType;

    abstract class AbstractSearchCompaniesField
    {
    	/**
    	 * Search companies
    	 *
    	 * @return \JmvDevelop\GraphqlGenerator\Example\Entity\Pager<\JmvDevelop\GraphqlGenerator\Example\Entity\Company>|null
    	 */
    	abstract public function resolve(SearchCompanyWhereInputType|null $where): Pager|null;
    }
QueryField/SearchCompaniesField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractSearchCompaniesField;

    final class SearchCompaniesField extends AbstractSearchCompaniesField
    {
    }
Generated/QueryField/AbstractCompanyField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Company;

    abstract class AbstractCompanyField
    {
    	/**
    	 * Get a company with id
    	 */
    	public function resolve(Company $id): Company|null
    	{
    		return $id;
    	}
    }
QueryField/CompanyField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractCompanyField;

    final class CompanyField extends AbstractCompanyField
    {
    }
Generated/QueryField/AbstractStrictCompanyField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Company;

    abstract class AbstractStrictCompanyField
    {
    	/**
    	 * Get a company with id (strict)
    	 */
    	public function resolve(Company $id): Company
    	{
    		return $id;
    	}
    }
QueryField/StrictCompanyField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractStrictCompanyField;

    final class StrictCompanyField extends AbstractStrictCompanyField
    {
    }
Generated/QueryField/AbstractCategoryField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Category;

    abstract class AbstractCategoryField
    {
    	/**
    	 * Get a category with id
    	 */
    	public function resolve(Category $id): Category|null
    	{
    		return $id;
    	}
    }
QueryField/CategoryField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractCategoryField;

    final class CategoryField extends AbstractCategoryField
    {
    }
Generated/QueryField/AbstractStrictCategoryField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\Category;

    abstract class AbstractStrictCategoryField
    {
    	/**
    	 * Get a category with id
    	 */
    	public function resolve(Category $id): Category
    	{
    		return $id;
    	}
    }
QueryField/StrictCategoryField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractStrictCategoryField;

    final class StrictCategoryField extends AbstractStrictCategoryField
    {
    }
Generated/QueryField/AbstractUserField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\User;

    abstract class AbstractUserField
    {
    	/**
    	 * Get a user with id
    	 */
    	public function resolve(User $id): User|null
    	{
    		return $id;
    	}
    }
QueryField/UserField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractUserField;

    final class UserField extends AbstractUserField
    {
    }
Generated/QueryField/AbstractUsersField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    abstract class AbstractUsersField
    {
    	/**
    	 * Get all users
    	 *
    	 * @return list<\JmvDevelop\GraphqlGenerator\Example\Entity\User>
    	 */
    	abstract public function resolve(): array;
    }
QueryField/UsersField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractUsersField;

    final class UsersField extends AbstractUsersField
    {
    }
Generated/QueryField/AbstractStrictUserField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\User;

    abstract class AbstractStrictUserField
    {
    	/**
    	 * Get a user with id
    	 */
    	public function resolve(User $id): User
    	{
    		return $id;
    	}
    }
QueryField/StrictUserField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractStrictUserField;

    final class StrictUserField extends AbstractStrictUserField
    {
    }
Generated/QueryField/AbstractCompaniesAndCategoriesField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField;

    abstract class AbstractCompaniesAndCategoriesField
    {
    	/**
    	 * @return list<\JmvDevelop\GraphqlGenerator\Example\Entity\Company|\JmvDevelop\GraphqlGenerator\Example\Entity\Category>
    	 */
    	abstract public function resolve(): array;
    }
QueryField/CompaniesAndCategoriesField.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\QueryField\AbstractCompaniesAndCategoriesField;

    final class CompaniesAndCategoriesField extends AbstractCompaniesAndCategoriesField
    {
    }
Generated/Custom/Mutation/AbstractCreateUserMutation.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Mutation;

    use JmvDevelop\GraphqlGenerator\Example\Entity\User;
    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\InputObject\CreateUserInputType;

    abstract class AbstractCreateUserMutation
    {
    	/**
    	 * Create an User
    	 */
    	abstract public function resolve(CreateUserInputType $data): User;
    }
Custom/Mutation/CreateUserMutation.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Mutation;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\Mutation\AbstractCreateUserMutation;

    final class CreateUserMutation extends AbstractCreateUserMutation
    {
    }
Generated/MutationField/AbstractEditUserMutation.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\MutationField;

    use JmvDevelop\GraphqlGenerator\Example\Entity\User;
    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\EditUserInputType;

    abstract class AbstractEditUserMutation
    {
    	/**
    	 * Create an User
    	 */
    	abstract public function resolve(EditUserInputType $data): User;
    }
MutationField/EditUserMutation.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\MutationField;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\MutationField\AbstractEditUserMutation;

    final class EditUserMutation extends AbstractEditUserMutation
    {
    }
Generated/Test/AbstractTestWithNullableInputFieldMutation.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test;

    abstract class AbstractTestWithNullableInputFieldMutation
    {
    	abstract public function resolve(TestWithNullableInputFieldType|null $data): bool;
    }
Test/TestWithNullableInputFieldMutation.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Test;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test\AbstractTestWithNullableInputFieldMutation;

    final class TestWithNullableInputFieldMutation extends AbstractTestWithNullableInputFieldMutation
    {
    }
Generated/AbstractSchema.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql\Generated;

    use GraphQL\Type\Definition\CustomScalarType;
    use GraphQL\Type\Definition\EnumType;
    use GraphQL\Type\Definition\InputObjectType;
    use GraphQL\Type\Definition\InterfaceType;
    use GraphQL\Type\Definition\ObjectType;
    use GraphQL\Type\Definition\ScalarType;
    use GraphQL\Type\Definition\UnionType;
    use Psr\Container\ContainerInterface;
    use Symfony\Contracts\Service\ServiceSubscriberInterface;

    abstract class AbstractSchema implements ServiceSubscriberInterface
    {
    	private $property_scalar_type_DateTimeTz = null;
    	private $property_scalar_type_CompanyId = null;
    	private $property_scalar_type_UserId = null;
    	private $property_scalar_type_CategoryId = null;
    	private $property_enum_type_YesNo = null;
    	private $property_enum_type_OrderDirection = null;
    	private $property_interface_type_WithId = null;
    	private $property_interface_type_WithName = null;
    	private $property_object_type_PagerCompany = null;
    	private $property_object_type_User = null;
    	private $property_object_type_Category = null;
    	private $property_object_type_Company = null;
    	private $property_union_type_CompanyOrCategory = null;
    	private $property_input_object_type_StringExprInput = null;
    	private $property_input_object_type_IntExprInput = null;
    	private $property_input_object_type_SearchCompanyWhereInput = null;
    	private $property_input_object_type_CreateUserInput = null;
    	private $property_input_object_type_EditUserInput = null;
    	private $property_input_object_type_TestInputWithStringField = null;
    	private $property_input_object_type_TestWithNullableInputField = null;


    	public function __construct(private ContainerInterface $services)
    	{
    	}


    	private function service(string $name)
    	{
    		return $this->services->get($name);
    	}


    	public function get_scalar_ID(): ScalarType
    	{
    		return \GraphQL\Type\Definition\Type::id();
    	}


    	private function transform_scalar_type_ID($value)
    	{
    		return $value;
    	}


    	public function get_scalar_String(): ScalarType
    	{
    		return \GraphQL\Type\Definition\Type::string();
    	}


    	private function transform_scalar_type_String($value)
    	{
    		return $value;
    	}


    	public function get_scalar_Int(): ScalarType
    	{
    		return \GraphQL\Type\Definition\Type::int();
    	}


    	private function transform_scalar_type_Int($value)
    	{
    		return $value;
    	}


    	public function get_scalar_Float(): ScalarType
    	{
    		return \GraphQL\Type\Definition\Type::float();
    	}


    	private function transform_scalar_type_Float($value)
    	{
    		return $value;
    	}


    	public function get_scalar_Boolean(): ScalarType
    	{
    		return \GraphQL\Type\Definition\Type::boolean();
    	}


    	private function transform_scalar_type_Boolean($value)
    	{
    		return $value;
    	}


    	public function get_scalar_DateTimeTz(): CustomScalarType
    	{
    		if ($this->property_scalar_type_DateTimeTz === null) {
    		                    $this->property_scalar_type_DateTimeTz = new \GraphQL\Type\Definition\CustomScalarType([
    		                        "description" => 'Represent date with timezone',
    		                        "name" => 'DateTimeTz',
    		                        "serialize" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Scalar\DateTimeTzType')->serialize($value);
    		                        },
    		                        "parseValue" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Scalar\DateTimeTzType')->parseValue($value);
    		                        },
    		                        "parseLiteral" => function (\GraphQL\Language\AST\Node $valueNode, array|null $variables = null) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Scalar\DateTimeTzType')->parseLiteral($valueNode, $variables);
    		                        },
    		                    ]);
    		                }
    		                return $this->property_scalar_type_DateTimeTz;
    	}


    	private function transform_scalar_type_DateTimeTz($value)
    	{
    		return $value;
    	}


    	public function get_scalar_CompanyId(): CustomScalarType
    	{
    		if ($this->property_scalar_type_CompanyId === null) {
    		                    $this->property_scalar_type_CompanyId = new \GraphQL\Type\Definition\CustomScalarType([
    		                        "description" => 'Represent an id of Company entity',
    		                        "name" => 'CompanyId',
    		                        "serialize" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CompanyIdType')->serialize($value);
    		                        },
    		                        "parseValue" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CompanyIdType')->parseValue($value);
    		                        },
    		                        "parseLiteral" => function (\GraphQL\Language\AST\Node $valueNode, array|null $variables = null) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CompanyIdType')->parseLiteral($valueNode, $variables);
    		                        },
    		                    ]);
    		                }
    		                return $this->property_scalar_type_CompanyId;
    	}


    	private function transform_scalar_type_CompanyId($value)
    	{
    		return $value;
    	}


    	public function get_scalar_UserId(): CustomScalarType
    	{
    		if ($this->property_scalar_type_UserId === null) {
    		                    $this->property_scalar_type_UserId = new \GraphQL\Type\Definition\CustomScalarType([
    		                        "description" => 'Represent an id of User entity',
    		                        "name" => 'UserId',
    		                        "serialize" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\UserIdType')->serialize($value);
    		                        },
    		                        "parseValue" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\UserIdType')->parseValue($value);
    		                        },
    		                        "parseLiteral" => function (\GraphQL\Language\AST\Node $valueNode, array|null $variables = null) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\UserIdType')->parseLiteral($valueNode, $variables);
    		                        },
    		                    ]);
    		                }
    		                return $this->property_scalar_type_UserId;
    	}


    	private function transform_scalar_type_UserId($value)
    	{
    		return $value;
    	}


    	public function get_scalar_CategoryId(): CustomScalarType
    	{
    		if ($this->property_scalar_type_CategoryId === null) {
    		                    $this->property_scalar_type_CategoryId = new \GraphQL\Type\Definition\CustomScalarType([
    		                        "description" => 'Represent ad id of Category entity',
    		                        "name" => 'CategoryId',
    		                        "serialize" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CategoryIdType')->serialize($value);
    		                        },
    		                        "parseValue" => function ($value) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CategoryIdType')->parseValue($value);
    		                        },
    		                        "parseLiteral" => function (\GraphQL\Language\AST\Node $valueNode, array|null $variables = null) {
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CategoryIdType')->parseLiteral($valueNode, $variables);
    		                        },
    		                    ]);
    		                }
    		                return $this->property_scalar_type_CategoryId;
    	}


    	private function transform_scalar_type_CategoryId($value)
    	{
    		return $value;
    	}


    	public function get_enum_type_YesNo(): EnumType
    	{
    		if ($this->property_enum_type_YesNo === null) {
    		                    $this->property_enum_type_YesNo = new \GraphQL\Type\Definition\EnumType([
    		                        "description" => '',
    		                        "name" => 'YesNo',
    		                        "values" => [

    		'YES' => [
    		                "name" => 'YES',
    		                "description" => 'Yes value',
    		                "value" => 'YES',
    		            ],
    		'NO' => [
    		                "name" => 'NO',
    		                "description" => 'No value',
    		                "value" => 'NO',
    		            ],
    		'DEFAULT' => [
    		                "name" => 'DEFAULT',
    		                "description" => 'Default value',
    		                "value" => 'DEFAULT',
    		            ],
    		           ]
    		                    ]);
    		                }
    		                return $this->property_enum_type_YesNo;
    	}


    	private function transform_enum_type_YesNo($value)
    	{
    		return $value;
    	}


    	public function get_enum_type_OrderDirection(): EnumType
    	{
    		if ($this->property_enum_type_OrderDirection === null) {
    		                    $this->property_enum_type_OrderDirection = new \GraphQL\Type\Definition\EnumType([
    		                        "description" => '',
    		                        "name" => 'OrderDirection',
    		                        "values" => [

    		'ASC' => [
    		                "name" => 'ASC',
    		                "description" => '',
    		                "value" => 'ASC',
    		            ],
    		'DESC' => [
    		                "name" => 'DESC',
    		                "description" => '',
    		                "value" => 'DESC',
    		            ],
    		'DEFAULT' => [
    		                "name" => 'DEFAULT',
    		                "description" => '',
    		                "value" => 'DEFAULT',
    		            ],
    		           ]
    		                    ]);
    		                }
    		                return $this->property_enum_type_OrderDirection;
    	}


    	private function transform_enum_type_OrderDirection($value)
    	{
    		return $value;
    	}


    	public function get_interface_type_WithId(): InterfaceType
    	{
    		if ($this->property_interface_type_WithId === null) {
    		                $this->property_interface_type_WithId = new \GraphQL\Type\Definition\InterfaceType([
    		                    "description" => 'Object with id',
    		                    "name" => 'WithId',
    		                    "resolveType" => function($value) {
    		                        return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Interface\WithIdType')->resolveType($value);
    		                    },
    		                    "fields" => function () {
    		                        return [

    		'id' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_ID()),
    		                            "description" => '',
    		                        ],

    		                        ];
    		                    },
    		                ]);
    		             }

    		             return $this->property_interface_type_WithId;
    	}


    	private function transform_interface_type_WithId($value)
    	{
    		return $value;
    	}


    	public function get_interface_type_WithName(): InterfaceType
    	{
    		if ($this->property_interface_type_WithName === null) {
    		                $this->property_interface_type_WithName = new \GraphQL\Type\Definition\InterfaceType([
    		                    "description" => 'Object with string name',
    		                    "name" => 'WithName',
    		                    "resolveType" => function($value) {
    		                        return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\InterfaceType\WithNameType')->resolveType($value);
    		                    },
    		                    "fields" => function () {
    		                        return [

    		'name' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                            "description" => '',
    		                        ],

    		                        ];
    		                    },
    		                ]);
    		             }

    		             return $this->property_interface_type_WithName;
    	}


    	private function transform_interface_type_WithName($value)
    	{
    		return $value;
    	}


    	public function get_object_type_PagerCompany(): ObjectType
    	{
    		if ($this->property_object_type_PagerCompany === null) {
    		                $this->property_object_type_PagerCompany = new \GraphQL\Type\Definition\ObjectType([
    		                    "description" => 'Pager for company entity',
    		                    "name" => 'PagerCompany',
    		                    "interfaces" => function () {
    		                        return [

    		                        ];
    		                    },
    		                    "fields" => function () {
    		                        return [

    		'currentPage' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_Int()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\PagerCompanyType')->resolveCurrentPage(root: $__root, );
    		                            },
    		                        ],
    		'maxPerPage' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_Int()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\PagerCompanyType')->resolveMaxPerPage(root: $__root, );
    		                            },
    		                        ],
    		'nbPages' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_Int()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\PagerCompanyType')->resolveNbPages(root: $__root, );
    		                            },
    		                        ],
    		'count' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_Int()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\PagerCompanyType')->resolveCount(root: $__root, );
    		                            },
    		                        ],
    		'results' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull(\GraphQL\Type\Definition\Type::listOf(\GraphQL\Type\Definition\Type::nonNull($this->get_object_type_Company()))),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\PagerCompanyType')->resolveResults(root: $__root, );
    		                            },
    		                        ],

    		                        ];
    		                    },
    		                ]);
    		             }

    		             return $this->property_object_type_PagerCompany;
    	}


    	private function transform_object_type_PagerCompany($value)
    	{
    		return $value;
    	}


    	public function get_object_type_User(): ObjectType
    	{
    		if ($this->property_object_type_User === null) {
    		                $this->property_object_type_User = new \GraphQL\Type\Definition\ObjectType([
    		                    "description" => 'User entity',
    		                    "name" => 'User',
    		                    "interfaces" => function () {
    		                        return [
    		                            $this->get_interface_type_WithId()
    		                        ];
    		                    },
    		                    "fields" => function () {
    		                        return [

    		'id' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_ID()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\UserType')->resolveId(root: $__root, );
    		                            },
    		                        ],
    		'email' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\UserType')->resolveEmail(root: $__root, );
    		                            },
    		                        ],
    		'lastname' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\UserType')->resolveLastname(root: $__root, );
    		                            },
    		                        ],
    		'firstname' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\UserType')->resolveFirstname(root: $__root, );
    		                            },
    		                        ],

    		                        ];
    		                    },
    		                ]);
    		             }

    		             return $this->property_object_type_User;
    	}


    	private function transform_object_type_User($value)
    	{
    		return $value;
    	}


    	public function get_object_type_Category(): ObjectType
    	{
    		if ($this->property_object_type_Category === null) {
    		                $this->property_object_type_Category = new \GraphQL\Type\Definition\ObjectType([
    		                    "description" => 'Category entity',
    		                    "name" => 'Category',
    		                    "interfaces" => function () {
    		                        return [
    		                            $this->get_interface_type_WithName(),
    		$this->get_interface_type_WithId()
    		                        ];
    		                    },
    		                    "fields" => function () {
    		                        return [

    		'id' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_ID()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\CategoryType')->resolveId(root: $__root, );
    		                            },
    		                        ],
    		'name' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\CategoryType')->resolveName(root: $__root, );
    		                            },
    		                        ],

    		                        ];
    		                    },
    		                ]);
    		             }

    		             return $this->property_object_type_Category;
    	}


    	private function transform_object_type_Category($value)
    	{
    		return $value;
    	}


    	public function get_object_type_Company(): ObjectType
    	{
    		if ($this->property_object_type_Company === null) {
    		                $this->property_object_type_Company = new \GraphQL\Type\Definition\ObjectType([
    		                    "description" => 'Company entity',
    		                    "name" => 'Company',
    		                    "interfaces" => function () {
    		                        return [
    		                            $this->get_interface_type_WithName(),
    		$this->get_interface_type_WithId()
    		                        ];
    		                    },
    		                    "fields" => function () {
    		                        return [

    		'id' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_ID()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object\CompanyType')->resolveId(root: $__root, );
    		                            },
    		                        ],
    		'name' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                            "description" => '',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object\CompanyType')->resolveName(root: $__root, );
    		                            },
    		                        ],
    		'user' => [
    		                            "type" => $this->get_object_type_User(),
    		                            "description" => 'The manager of company',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object\CompanyType')->resolveUser(root: $__root, );
    		                            },
    		                        ],
    		'categories' => [
    		                            "type" => \GraphQL\Type\Definition\Type::nonNull(\GraphQL\Type\Definition\Type::listOf(\GraphQL\Type\Definition\Type::nonNull($this->get_object_type_Category()))),
    		                            "description" => 'All categories of company',
    		                            "args" => [],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object\CompanyType')->resolveCategories(root: $__root, );
    		                            },
    		                        ],
    		'searchCategories' => [
    		                            "type" => \GraphQL\Type\Definition\Type::listOf($this->get_object_type_Category()),
    		                            "description" => 'Search categories of company',
    		                            "args" => [[
    		                                "name" => 'name',
    		                                "description" => '',
    		                                "type" => $this->get_scalar_String(),
    		                            ], [
    		                                "name" => 'keywords',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::listOf($this->get_scalar_String()),
    		                            ], [
    		                                "name" => 'orderBy',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                            ]],
    		                            "resolve" => function($__root, array $__args = []) {
    		                                return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object\CompanyType')->resolveSearchCategories(root: $__root, name: ((null === (($__args)['name'] ?? null) ? null : $this->transform_scalar_type_String(($__args)['name'] ?? null))), keywords: ((function ($__value) {
    		                return $__value === null ? null : array_map(function ($__value) {
    		                    return ((null === ($__value) ? null : $this->transform_scalar_type_String($__value)));
    		                }, $__value);
    		            })(($__args)['keywords'] ?? null)), orderBy: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_String($__value)));
    		            })(($__args)['orderBy'] ?? null)));
    		                            },
    		                        ],

    		                        ];
    		                    },
    		                ]);
    		             }

    		             return $this->property_object_type_Company;
    	}


    	private function transform_object_type_Company($value)
    	{
    		return $value;
    	}


    	public function get_union_type_CompanyOrCategory(): UnionType
    	{
    		if ($this->property_union_type_CompanyOrCategory === null) {
    		                $this->property_union_type_CompanyOrCategory = new \GraphQL\Type\Definition\UnionType([
    		                    "description" => '',
    		                    "name" => 'CompanyOrCategory',
    		                    "types" => [
    		                        $this->get_object_type_Company(),
    		$this->get_object_type_Category()
    		                    ],
    		                    "resolveType" => function($value) {
    		                        return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\UnionType\CompanyOrCategoryType')->resolveType($value);
    		                    },
    		                ]);
    		            }


    		             return $this->property_union_type_CompanyOrCategory;
    	}


    	private function transform_union_type_CompanyOrCategory($value)
    	{
    		return $value;
    	}


    	public function get_input_object_type_StringExprInput(): InputObjectType
    	{
    		if ($this->property_input_object_type_StringExprInput === null) {
    		                $this->property_input_object_type_StringExprInput = new \GraphQL\Type\Definition\InputObjectType([
    		                    "description" => '',
    		                    "name" => 'StringExprInput',
    		                    "fields" => function () {
    		                        return [

    		'eq' => [
    		                        "type" => $this->get_scalar_String(),
    		                        "description" => '',
    		                    ],
    		'neq' => [
    		                        "type" => $this->get_scalar_String(),
    		                        "description" => '',
    		                    ],
    		'like' => [
    		                        "type" => $this->get_scalar_String(),
    		                        "description" => '',
    		                    ],

    		                        ];
    		                    },
    		                ]);
    		            }

    		            return $this->property_input_object_type_StringExprInput;
    	}


    	private function transform_input_object_type_StringExprInput($value)
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\StringExprInputType(eq: ((null === (($value)['eq'] ?? null) ? null : $this->transform_scalar_type_String(($value)['eq'] ?? null))), neq: ((null === (($value)['neq'] ?? null) ? null : $this->transform_scalar_type_String(($value)['neq'] ?? null))), like: ((null === (($value)['like'] ?? null) ? null : $this->transform_scalar_type_String(($value)['like'] ?? null))));
    	}


    	public function get_input_object_type_IntExprInput(): InputObjectType
    	{
    		if ($this->property_input_object_type_IntExprInput === null) {
    		                $this->property_input_object_type_IntExprInput = new \GraphQL\Type\Definition\InputObjectType([
    		                    "description" => '',
    		                    "name" => 'IntExprInput',
    		                    "fields" => function () {
    		                        return [

    		'eq' => [
    		                        "type" => $this->get_scalar_Int(),
    		                        "description" => '',
    		                    ],
    		'neq' => [
    		                        "type" => $this->get_scalar_Int(),
    		                        "description" => '',
    		                    ],
    		'gt' => [
    		                        "type" => $this->get_scalar_Int(),
    		                        "description" => '',
    		                    ],
    		'gte' => [
    		                        "type" => $this->get_scalar_Int(),
    		                        "description" => '',
    		                    ],
    		'lt' => [
    		                        "type" => $this->get_scalar_Int(),
    		                        "description" => '',
    		                    ],
    		'lte' => [
    		                        "type" => $this->get_scalar_Int(),
    		                        "description" => '',
    		                    ],

    		                        ];
    		                    },
    		                ]);
    		            }

    		            return $this->property_input_object_type_IntExprInput;
    	}


    	private function transform_input_object_type_IntExprInput($value)
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\IntExprInputType(eq: ((null === (($value)['eq'] ?? null) ? null : $this->transform_scalar_type_Int(($value)['eq'] ?? null))), neq: ((null === (($value)['neq'] ?? null) ? null : $this->transform_scalar_type_Int(($value)['neq'] ?? null))), gt: ((null === (($value)['gt'] ?? null) ? null : $this->transform_scalar_type_Int(($value)['gt'] ?? null))), gte: ((null === (($value)['gte'] ?? null) ? null : $this->transform_scalar_type_Int(($value)['gte'] ?? null))), lt: ((null === (($value)['lt'] ?? null) ? null : $this->transform_scalar_type_Int(($value)['lt'] ?? null))), lte: ((null === (($value)['lte'] ?? null) ? null : $this->transform_scalar_type_Int(($value)['lte'] ?? null))));
    	}


    	public function get_input_object_type_SearchCompanyWhereInput(): InputObjectType
    	{
    		if ($this->property_input_object_type_SearchCompanyWhereInput === null) {
    		                $this->property_input_object_type_SearchCompanyWhereInput = new \GraphQL\Type\Definition\InputObjectType([
    		                    "description" => '',
    		                    "name" => 'SearchCompanyWhereInput',
    		                    "fields" => function () {
    		                        return [

    		'_and' => [
    		                        "type" => \GraphQL\Type\Definition\Type::listOf($this->get_input_object_type_SearchCompanyWhereInput()),
    		                        "description" => '',
    		                    ],
    		'_or' => [
    		                        "type" => \GraphQL\Type\Definition\Type::listOf($this->get_input_object_type_SearchCompanyWhereInput()),
    		                        "description" => '',
    		                    ],
    		'name' => [
    		                        "type" => $this->get_input_object_type_StringExprInput(),
    		                        "description" => '',
    		                    ],
    		'id' => [
    		                        "type" => $this->get_input_object_type_IntExprInput(),
    		                        "description" => '',
    		                    ],
    		'withCategory' => [
    		                        "type" => $this->get_enum_type_YesNo(),
    		                        "description" => '',
    		                    ],

    		                        ];
    		                    },
    		                ]);
    		            }

    		            return $this->property_input_object_type_SearchCompanyWhereInput;
    	}


    	private function transform_input_object_type_SearchCompanyWhereInput($value)
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\SearchCompanyWhereInputType(_and: ((function ($__value) {
    		                return $__value === null ? null : array_map(function ($__value) {
    		                    return ((null === ($__value) ? null : $this->transform_input_object_type_SearchCompanyWhereInput($__value)));
    		                }, $__value);
    		            })(($value)['_and'] ?? null)), _or: ((function ($__value) {
    		                return $__value === null ? null : array_map(function ($__value) {
    		                    return ((null === ($__value) ? null : $this->transform_input_object_type_SearchCompanyWhereInput($__value)));
    		                }, $__value);
    		            })(($value)['_or'] ?? null)), name: ((null === (($value)['name'] ?? null) ? null : $this->transform_input_object_type_StringExprInput(($value)['name'] ?? null))), id: ((null === (($value)['id'] ?? null) ? null : $this->transform_input_object_type_IntExprInput(($value)['id'] ?? null))), withCategory: ((null === (($value)['withCategory'] ?? null) ? null : $this->transform_enum_type_YesNo(($value)['withCategory'] ?? null))));
    	}


    	public function get_input_object_type_CreateUserInput(): InputObjectType
    	{
    		if ($this->property_input_object_type_CreateUserInput === null) {
    		                $this->property_input_object_type_CreateUserInput = new \GraphQL\Type\Definition\InputObjectType([
    		                    "description" => '',
    		                    "name" => 'CreateUserInput',
    		                    "fields" => function () {
    		                        return [

    		'email' => [
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                        "description" => '',
    		                    ],
    		'lastname' => [
    		                        "type" => $this->get_scalar_String(),
    		                        "description" => '',
    		                    ],
    		'firstname' => [
    		                        "type" => $this->get_scalar_String(),
    		                        "description" => '',
    		                    ],

    		                        ];
    		                    },
    		                ]);
    		            }

    		            return $this->property_input_object_type_CreateUserInput;
    	}


    	private function transform_input_object_type_CreateUserInput($value)
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Custom\InputObject\CreateUserInputType(email: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_String($__value)));
    		            })(($value)['email'] ?? null)), lastname: ((null === (($value)['lastname'] ?? null) ? null : $this->transform_scalar_type_String(($value)['lastname'] ?? null))), firstname: ((null === (($value)['firstname'] ?? null) ? null : $this->transform_scalar_type_String(($value)['firstname'] ?? null))));
    	}


    	public function get_input_object_type_EditUserInput(): InputObjectType
    	{
    		if ($this->property_input_object_type_EditUserInput === null) {
    		                $this->property_input_object_type_EditUserInput = new \GraphQL\Type\Definition\InputObjectType([
    		                    "description" => '',
    		                    "name" => 'EditUserInput',
    		                    "fields" => function () {
    		                        return [

    		'id' => [
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_UserId()),
    		                        "description" => '',
    		                    ],
    		'email' => [
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                        "description" => '',
    		                    ],
    		'lastname' => [
    		                        "type" => $this->get_scalar_String(),
    		                        "description" => '',
    		                    ],
    		'firstname' => [
    		                        "type" => $this->get_scalar_String(),
    		                        "description" => '',
    		                    ],

    		                        ];
    		                    },
    		                ]);
    		            }

    		            return $this->property_input_object_type_EditUserInput;
    	}


    	private function transform_input_object_type_EditUserInput($value)
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\InputObjectType\EditUserInputType(id: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_UserId($__value)));
    		            })(($value)['id'] ?? null)), email: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_String($__value)));
    		            })(($value)['email'] ?? null)), lastname: ((null === (($value)['lastname'] ?? null) ? null : $this->transform_scalar_type_String(($value)['lastname'] ?? null))), firstname: ((null === (($value)['firstname'] ?? null) ? null : $this->transform_scalar_type_String(($value)['firstname'] ?? null))));
    	}


    	public function get_input_object_type_TestInputWithStringField(): InputObjectType
    	{
    		if ($this->property_input_object_type_TestInputWithStringField === null) {
    		                $this->property_input_object_type_TestInputWithStringField = new \GraphQL\Type\Definition\InputObjectType([
    		                    "description" => '',
    		                    "name" => 'TestInputWithStringField',
    		                    "fields" => function () {
    		                        return [

    		'name' => [
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_String()),
    		                        "description" => '',
    		                    ],

    		                        ];
    		                    },
    		                ]);
    		            }

    		            return $this->property_input_object_type_TestInputWithStringField;
    	}


    	private function transform_input_object_type_TestInputWithStringField($value)
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test\TestInputWithStringFieldType(name: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_String($__value)));
    		            })(($value)['name'] ?? null)));
    	}


    	public function get_input_object_type_TestWithNullableInputField(): InputObjectType
    	{
    		if ($this->property_input_object_type_TestWithNullableInputField === null) {
    		                $this->property_input_object_type_TestWithNullableInputField = new \GraphQL\Type\Definition\InputObjectType([
    		                    "description" => '',
    		                    "name" => 'TestWithNullableInputField',
    		                    "fields" => function () {
    		                        return [

    		'nullableField' => [
    		                        "type" => $this->get_input_object_type_TestInputWithStringField(),
    		                        "description" => '',
    		                    ],
    		'field' => [
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_input_object_type_TestInputWithStringField()),
    		                        "description" => '',
    		                    ],

    		                        ];
    		                    },
    		                ]);
    		            }

    		            return $this->property_input_object_type_TestWithNullableInputField;
    	}


    	private function transform_input_object_type_TestWithNullableInputField($value)
    	{
    		return new \JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\Test\TestWithNullableInputFieldType(nullableField: ((null === (($value)['nullableField'] ?? null) ? null : $this->transform_input_object_type_TestInputWithStringField(($value)['nullableField'] ?? null))), field: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_input_object_type_TestInputWithStringField($__value)));
    		            })(($value)['field'] ?? null)));
    	}


    	public function query(): ObjectType
    	{
    		return new \GraphQL\Type\Definition\ObjectType([
    		                    "name" => 'Query',
    		                    "fields" => function() {
    		                        return [

    		'searchByName' => [
    		                        "name" => 'searchByName',
    		                        "description" => 'Search all entities with name',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull(\GraphQL\Type\Definition\Type::listOf(\GraphQL\Type\Definition\Type::nonNull($this->get_interface_type_WithName()))),
    		                        "args" => [[
    		                                "name" => 'name',
    		                                "description" => '',
    		                                "type" => $this->get_scalar_String(),
    		                            ], [
    		                                "name" => 'orderByName',
    		                                "description" => '',
    		                                "type" => $this->get_enum_type_OrderDirection(),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\QueryField\SearchByNameField')->resolve(name: ((null === (($__args)['name'] ?? null) ? null : $this->transform_scalar_type_String(($__args)['name'] ?? null))), orderByName: ((null === (($__args)['orderByName'] ?? null) ? null : $this->transform_enum_type_OrderDirection(($__args)['orderByName'] ?? null))));
    		                        },
    		                    ],
    		'searchCompanies' => [
    		                        "name" => 'searchCompanies',
    		                        "description" => 'Search companies',
    		                        "type" => $this->get_object_type_PagerCompany(),
    		                        "args" => [[
    		                                "name" => 'where',
    		                                "description" => '',
    		                                "type" => $this->get_input_object_type_SearchCompanyWhereInput(),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\SearchCompaniesField')->resolve(where: ((null === (($__args)['where'] ?? null) ? null : $this->transform_input_object_type_SearchCompanyWhereInput(($__args)['where'] ?? null))));
    		                        },
    		                    ],
    		'company' => [
    		                        "name" => 'company',
    		                        "description" => 'Get a company with id',
    		                        "type" => $this->get_object_type_Company(),
    		                        "args" => [[
    		                                "name" => 'id',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_CompanyId()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CompanyField')->resolve(id: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_CompanyId($__value)));
    		            })(($__args)['id'] ?? null)));
    		                        },
    		                    ],
    		'strictCompany' => [
    		                        "name" => 'strictCompany',
    		                        "description" => 'Get a company with id (strict)',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_object_type_Company()),
    		                        "args" => [[
    		                                "name" => 'id',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_CompanyId()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictCompanyField')->resolve(id: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_CompanyId($__value)));
    		            })(($__args)['id'] ?? null)));
    		                        },
    		                    ],
    		'category' => [
    		                        "name" => 'category',
    		                        "description" => 'Get a category with id',
    		                        "type" => $this->get_object_type_Category(),
    		                        "args" => [[
    		                                "name" => 'id',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_CategoryId()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CategoryField')->resolve(id: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_CategoryId($__value)));
    		            })(($__args)['id'] ?? null)));
    		                        },
    		                    ],
    		'strictCategory' => [
    		                        "name" => 'strictCategory',
    		                        "description" => 'Get a category with id',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_object_type_Category()),
    		                        "args" => [[
    		                                "name" => 'id',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_CategoryId()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictCategoryField')->resolve(id: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_CategoryId($__value)));
    		            })(($__args)['id'] ?? null)));
    		                        },
    		                    ],
    		'user' => [
    		                        "name" => 'user',
    		                        "description" => 'Get a user with id',
    		                        "type" => $this->get_object_type_User(),
    		                        "args" => [[
    		                                "name" => 'id',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_UserId()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\UserField')->resolve(id: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_UserId($__value)));
    		            })(($__args)['id'] ?? null)));
    		                        },
    		                    ],
    		'users' => [
    		                        "name" => 'users',
    		                        "description" => 'Get all users',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull(\GraphQL\Type\Definition\Type::listOf(\GraphQL\Type\Definition\Type::nonNull($this->get_object_type_User()))),
    		                        "args" => [],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\UsersField')->resolve();
    		                        },
    		                    ],
    		'strictUser' => [
    		                        "name" => 'strictUser',
    		                        "description" => 'Get a user with id',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_object_type_User()),
    		                        "args" => [[
    		                                "name" => 'id',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_UserId()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictUserField')->resolve(id: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_scalar_type_UserId($__value)));
    		            })(($__args)['id'] ?? null)));
    		                        },
    		                    ],
    		'companiesAndCategories' => [
    		                        "name" => 'companiesAndCategories',
    		                        "description" => '',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull(\GraphQL\Type\Definition\Type::listOf(\GraphQL\Type\Definition\Type::nonNull($this->get_union_type_CompanyOrCategory()))),
    		                        "args" => [],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CompaniesAndCategoriesField')->resolve();
    		                        },
    		                    ],

    		                        ];
    		                    },
    		                ]);
    	}


    	public function mutation(): ObjectType
    	{
    		return new \GraphQL\Type\Definition\ObjectType([
    		                    "name" => 'Mutation',
    		                    "fields" => function() {
    		                        return [

    		'createUser' => [
    		                        "name" => 'createUser',
    		                        "description" => 'Create an User',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_object_type_User()),
    		                        "args" => [[
    		                                "name" => 'data',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_input_object_type_CreateUserInput()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Mutation\CreateUserMutation')->resolve(data: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_input_object_type_CreateUserInput($__value)));
    		            })(($__args)['data'] ?? null)));
    		                        },
    		                    ],
    		'editUser' => [
    		                        "name" => 'editUser',
    		                        "description" => 'Create an User',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_object_type_User()),
    		                        "args" => [[
    		                                "name" => 'data',
    		                                "description" => '',
    		                                "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_input_object_type_EditUserInput()),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\MutationField\EditUserMutation')->resolve(data: ((function ($__value) {
    		                return $__value === null ? null : ((null === ($__value) ? null : $this->transform_input_object_type_EditUserInput($__value)));
    		            })(($__args)['data'] ?? null)));
    		                        },
    		                    ],
    		'testWithNullableInputField' => [
    		                        "name" => 'testWithNullableInputField',
    		                        "description" => '',
    		                        "type" => \GraphQL\Type\Definition\Type::nonNull($this->get_scalar_Boolean()),
    		                        "args" => [[
    		                                "name" => 'data',
    		                                "description" => '',
    		                                "type" => $this->get_input_object_type_TestWithNullableInputField(),
    		                            ]],
    		                        "resolve" => function($__root = null, null|array $__args = null) {
    		                            $__args = $__args === null ? [] : $__args;
    		                            return $this->service('JmvDevelop\GraphqlGenerator\Example\Graphql\Test\TestWithNullableInputFieldMutation')->resolve(data: ((null === (($__args)['data'] ?? null) ? null : $this->transform_input_object_type_TestWithNullableInputField(($__args)['data'] ?? null))));
    		                        },
    		                    ],

    		                        ];
    		                    },
    		                ]);
    	}


    	public static function getSubscribedServices(): array
    	{
    		return [
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Scalar\DateTimeTzType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Scalar\DateTimeTzType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CompanyIdType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CompanyIdType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\UserIdType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\UserIdType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CategoryIdType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\ScalarType\CategoryIdType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Interface\WithIdType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Interface\WithIdType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\InterfaceType\WithNameType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\InterfaceType\WithNameType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\PagerCompanyType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\PagerCompanyType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\UserType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\UserType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\CategoryType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\ObjectType\CategoryType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object\CompanyType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Object\CompanyType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\UnionType\CompanyOrCategoryType' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\UnionType\CompanyOrCategoryType',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\QueryField\SearchByNameField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\QueryField\SearchByNameField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\SearchCompaniesField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\SearchCompaniesField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CompanyField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CompanyField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictCompanyField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictCompanyField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CategoryField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CategoryField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictCategoryField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictCategoryField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\UserField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\UserField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\UsersField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\UsersField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictUserField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\StrictUserField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CompaniesAndCategoriesField' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\QueryField\CompaniesAndCategoriesField',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Mutation\CreateUserMutation' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\Custom\Mutation\CreateUserMutation',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\MutationField\EditUserMutation' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\MutationField\EditUserMutation',
    			'JmvDevelop\GraphqlGenerator\Example\Graphql\Test\TestWithNullableInputFieldMutation' => 'JmvDevelop\GraphqlGenerator\Example\Graphql\Test\TestWithNullableInputFieldMutation',
    		];
    	}
    }
Schema.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\GraphqlGenerator\Example\Graphql;

    use JmvDevelop\GraphqlGenerator\Example\Graphql\Generated\AbstractSchema;

    final class Schema extends AbstractSchema
    {
    }
